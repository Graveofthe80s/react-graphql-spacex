{"version":3,"sources":["spacex-logo.png","components/LaunchItem.js","components/MissionKey.js","components/Launches.js","components/Launch.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","LaunchItem","launch","flight_number","mission_name","launch_date_local","launch_success","className","style","color","format","to","MissionKey","backgroundColor","LAUNCHES_QUERY","gql","Launches","query","loading","error","data","console","log","launches","map","key","Component","LAUNCH_QUERY","Launch","props","id","match","params","parseInt","variables","launch_year","rocket","rocket_id","rocket_name","rocket_type","client","ApolloClient","uri","App","src","logo","width","display","margin","alt","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.8d8efbf4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spacex-logo.37a39b35.png\";","import React from 'react'\nimport Moment from 'react-moment'\nimport {Link} from 'react-router-dom'\n\nconst LaunchItem = ({launch: {flight_number, mission_name, launch_date_local, launch_success}}) => {\n  \n  return (\n    <div className=\"card card-body mb-3\">\n      <div className=\"row\">\n      <div className=\"col-md-9 d-flex flex-column justify-content-center align-items-start\">\n        <h4 style={{color: '#FFF4EA'}}>Mission: <span \n          style={{color: launch_success ? '#9CCd62' : '#FF5976'}}\n        >\n          {mission_name}\n        </span>\n        </h4>\n        <p>Date: <Moment format=\"YYYY-MM-DD HH:mm\">{launch_date_local}</Moment></p>\n      </div>\n      <div className=\"col-md-3 d-flex align-items-center justify-content-center\">\n        <Link to={`/launch/${flight_number}`} className=\"btn btn-secondary\">Launch Details</Link>\n      </div>\n      </div>\n    </div>\n  )\n}\n\nexport default LaunchItem\n","import React from 'react'\n\nconst MissionKey = () => {\n  return (\n    <div className=\"my-3\">\n      <p><span className=\"px-3 mr-2\" style={{backgroundColor: '#9CCd62'}}/> = Success</p>\n      <p><span className=\"px-3 mr-2\" style={{backgroundColor:\"#FF5976\"}} /> = Fail</p>\n    </div>\n  )\n}\n\nexport default MissionKey\n","import React, { Component, Fragment } from 'react'\nimport gql from 'graphql-tag';\nimport { Query } from \"react-apollo\";\nimport LaunchItem from './LaunchItem'\nimport MissionKey from './MissionKey'\n\nconst LAUNCHES_QUERY = gql`\n  query LaunchesQuery {\n    launches {\n      flight_number\n      mission_name\n      launch_date_local\n      launch_success\n    }\n  }\n`;\n\nexport default class Launches extends Component {\n  render() {\n    return (\n      <Fragment>\n        <h1 className=\"display-4 my-3\">Launches</h1>\n        <MissionKey />\n        <Query query={LAUNCHES_QUERY}>\n          {({loading, error, data}) => {\n            if(loading) return <h4>Loading...</h4>\n            if(error) console.log(error)\n            console.log(data)\n            return <Fragment className=\"my-3\">\n              {data.launches.map(launch => (\n                <LaunchItem key={launch.flight_number} launch={launch} />\n              ))}\n            </Fragment>\n          }}\n        </Query>\n      </Fragment>\n    )\n  }\n}\n","import React, { Fragment } from 'react'\nimport gql from 'graphql-tag'\nimport { Query } from 'react-apollo'\nimport { Link } from 'react-router-dom'\n\nconst LAUNCH_QUERY = gql`\n  query LaunchQuery($flight_number: Int!) {\n    launch(flight_number: $flight_number) {\n      flight_number\n      mission_name\n      launch_year\n      launch_success\n      launch_date_local\n      rocket {\n        rocket_id\n        rocket_name\n        rocket_type\n      }\n    }\n  }\n`\n\nconst Launch = (props) => {\n  let {id} = props.match.params;\n  let flight_number = parseInt(id)\n  console.log(flight_number)\n  return (\n    <Fragment>\n      <Query query={LAUNCH_QUERY} variables={{flight_number}} >\n        {\n          ({loading, error, data}) => {\n            if(loading) return <h4>Loading...</h4>\n            if(error) console.log(error)\n\n            const {mission_name, flight_number, launch_year, launch_success, rocket: {rocket_id, rocket_name, rocket_type}} = data.launch\n\n            return <div>\n              <h1 className=\"display-4 my-3\">\n                <span className=\"text-dark\">Mission: <span>{mission_name}</span></span>\n              </h1>\n              <h4 className=\"mb-3\">Launch Details</h4>\n              <ul className=\"list-group\">\n                <li className=\"list-group-item\">Flight Number: {flight_number}</li>\n                <li className=\"list-group-item\">Launch Year: {launch_year}</li>\n                <li className=\"list-group-item\">Launch Successful: <span style={{color: launch_success ? '#9CCd62' : '#FF5976'}}>{launch_success ? 'Yes':'No'}</span></li>\n              </ul>\n              \n              <h4 className=\"my-3\">\n                Rocket Details\n              </h4>\n              <ul className=\"list-group\">\n                  <li className=\"list-group-item\">Rocket ID: {rocket_id}</li>\n                  <li className=\"list-group-item\">Rocket Name: {rocket_name}</li>\n                  <li className=\"list-group-item\">Rocket Type: {rocket_type}</li>\n              </ul>\n              <hr/>\n              <Link to=\"/\" className=\"btn btn-secondary\">Back</Link>\n            </div>\n          }\n        }\n      </Query>\n    </Fragment>\n  )\n}\n\nexport default Launch\n","import React from 'react';\nimport ApolloClient from 'apollo-boost';\nimport {ApolloProvider} from \"react-apollo\"\nimport {BrowserRouter as Router, Route} from 'react-router-dom'\nimport logo from \"./spacex-logo.png\"\nimport Launches from './components/Launches'\nimport Launch from './components/Launch'\nimport './App.css';\n\nconst client = new ApolloClient({\n  uri: '/graphql'\n})\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n    <div className=\"container\">\n      <img src={logo} style={{width: '300px', display: \"block\", margin: \"20px auto\"}} alt=\"\"/>\n      <Route exact path=\"/\" component={Launches} />\n      <Route exact path=\"/launch/:id\" component={Launch} />\n    </div>\n    </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}